        ENTER
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rax, PARAM(0)
        assert_closure(rax)
        mov r9, 0
        mov rax, PARAM(1)
        cmp byte [rax], T_nil
        je .end_loop
        assert_pair(rax)
        push SOB_PAIR_CAR(rax) ; first param to f need to be push last
        mov r8, SOB_PAIR_CDR(rax)
        inc r9
.loop_pairs:
        cmp byte [r8], T_pair
        jne .end_loop
        inc r9 
        push SOB_PAIR_CAR(r8)
        mov r8, SOB_PAIR_CDR(r8)
        jmp .loop_pairs
.end_loop:
        push r9
        mov r12, 1
.loop_replace_line:
        cmp r9, 1
        jle .end_loop_replace
        mov r10, qword [rsp + 8 * (r9)]
        mov r11, qword [rsp + 8 * (r12)]
        mov qword [rsp + 8 * (r9)], r11
        mov qword [rsp + 8 * (r12)], r10
        inc r12
        sub r9, 2
        jmp .loop_replace_line
.end_loop_replace:
        mov rax, PARAM(0)
        mov rbx, SOB_CLOSURE_ENV(rax)
        push rbx
        mov rbx, SOB_CLOSURE_CODE(rax)
        call rbx
        LEAVE
        ret AND_KILL_FRAME(2)


tail version:

.start:
      ;;; get function and list of params as pairs     
        ENTER
        cmp COUNT, 2
        jne L_error_arg_count_2
        mov rax, PARAM(0)
        assert_closure(rax)
        mov r9, 0
        mov rax, PARAM(1)
        cmp byte [rax], T_nil
        je .end_loop
        assert_pair(rax)
        mov r8, rax
.loop_pairs:
        cmp byte [r8], T_pair
        jne .end_loop
        inc r9 
        mov r8, SOB_PAIR_CDR(r8)
        jmp .loop_pairs
.end_loop:
        mov r15, PARAM(0) ;function saving
        mov r8, PARAM(1)  ; list saving 
        mov r14, qword [rbp + 8 * 1] ; old return address saving
        mov r13, [rbp]    ; old rbp saving
        mov r12, rbp      ; arg pushing
        mov rax, 8
        mov r11, COUNT
        add r11, 3
        cqo
        imul r11
        mov r11, rax
        add r12, r11 ;up in the stuck of the frame 
        mov rax, 8
        dec r9
        cqo
        imul r9
        sub r12, rax
        inc r9
        mov r10,r12
        cmp byte [r8], T_nil
        je .end_push
.pushing:
        cmp byte [r8], T_pair
        jne .end_push
        mov r11, SOB_PAIR_CAR(r8) 
        mov [r12], r11
        add r12, 8
        mov r8, SOB_PAIR_CDR(r8)
        jmp .pushing
.end_push:
        mov rsp, r10
        push r9
        mov rbx, SOB_CLOSURE_ENV(r15)
        push rbx  ; env == 0
        push r14
        mov rbp, r13
        mov rbx, SOB_CLOSURE_CODE(r15)
        jmp rbx 